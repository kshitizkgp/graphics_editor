
package graphicseditor;



import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.*;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;

import javax.swing.JComponent;
import javax.swing.JFrame;
import java.awt.Image;
import java.awt.Toolkit;

public class PaintSurface extends javax.swing.JPanel {

    /**
     * Creates new form PaintSurface
     */
    public PaintSurface() {
        super.setBackground(Color.red);
        initComponents();
        addMouseListener(create_shapes);
        addMouseMotionListener(create_shapes);
        Toolkit t =  Toolkit.getDefaultToolkit();
        zoom_rect.height = t.getScreenSize().height;
        zoom_rect.width = t.getScreenSize().width;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void paintBackground(Graphics2D g2){
      g2.setPaint(Color.white);
      g2.setBackground(Color.white);
      super.setBackground(Color.white);
    }


    public void paintComponent(Graphics g) {
        super.paintComponent(g);

      Graphics2D g2 = (Graphics2D) g;
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      paintBackground(g2);
      Color[] colors = { Color.YELLOW, Color.MAGENTA, Color.CYAN , Color.RED, Color.BLUE, Color.PINK};
      int colorIndex = 0;

      g2.setStroke(new BasicStroke(2));
      g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.50f));

      for (Rect r : rect_array) {

        g2.setStroke(new BasicStroke(r.getLineWidth(),BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL, (float) 10.0,r.getDashPattern(), 0));
        if (!r.isSelected()){
            g2.setPaint(r.getBoundaryColor());
            g2.draw(r.getRectangle());
            g2.setPaint(r.getFillColor());
            g2.fill(r.getRectangle());
        }
        else{
            g2.setPaint(Color.RED);
            g2.draw(r.getRectangle());
            g2.fill(r.getRectangle());
            atleast_selected = true;
        }

      }

      for (Ellipse e : ellipse_array) {

        g2.setStroke(new BasicStroke(e.getLineWidth(),BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL, (float) 10.0,e.getDashPattern(), 0));
       if(!e.isSelected()){
            g2.setPaint(e.getBoundaryColor());
            g2.draw(e.getEll());
            g2.setPaint(e.getFillColor());
            g2.fill(e.getEll());
       }
       else{
            g2.setPaint(Color.RED);
            g2.draw(e.getEll());

            g2.setPaint(e.getFillColor());
            g2.fill(e.getEll());
            atleast_selected = true;
       }
      }
      for (Line l : line_array) {

        g2.setStroke(new BasicStroke(l.getLine_width(),BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL, (float) 10.0,l.getDash_pattern(), 0));
        if(!l.isSelected()){
            g2.setPaint(l.getBoundary_color());
            g2.draw(l.getLine_drawn());
        }
        else{
            g2.setPaint(Color.RED);
            g2.draw(l.getLine_drawn());
            atleast_selected = true;
        }
      }
      for (Poly p : poly_array) {

        g2.setStroke(new BasicStroke(p.getLineWidth(),BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL, (float) 10.0,p.getDashPattern(), 0));
        if(!p.isSelected()){
            g2.setPaint(p.getBoundaryColor());
            g2.draw(p.getPoly());
        }
        else{
            g2.setPaint(Color.RED);
            g2.draw(p.getPoly());
            atleast_selected = true;
        }
      }

      for (int i=0;i<num_images;i++){
          g2.drawImage(images.get(i), (int)img_rect.get(i).getRectangle().x, (int)img_rect.get(i).getRectangle().y, (int)img_rect.get(i).getRectangle().width, (int)img_rect.get(i).getRectangle().height, null);
      }

      for (int i=1;i<getMake_poly().getXp().size();i++){
          g2.setPaint(Color.BLACK);
          Line2D.Float l = new Line2D.Float(getMake_poly().getXp().get(i-1),getMake_poly().getYp().get(i-1),getMake_poly().getXp().get(i),getMake_poly().getYp().get(i));
          g2.draw(l);
      }

      for (int i=0;i<num_text;i++){
          TextBox t = text_array.get(i);
          g2.setColor(Color.BLACK);
          g2.setFont(new Font(t.getFont(),Font.PLAIN,t.getFont_size()));
          g2.drawString(t.getText(), text_rect.get(i).getRectangle().x + text_rect.get(i).getRectangle().width/2, text_rect.get(i).getRectangle().y + text_rect.get(i).getRectangle().height/2);
      }

      if (zoom_flag == true){

          g2.setPaint(Color.BLACK);
          g2.draw(getZoom().getRect_zoom());
      }

      int fontSize = 20;

    g2.setFont(new Font("TimesRoman", Font.PLAIN, fontSize));

    g2.setColor(Color.red);

    g2.drawString("www.java2s.com", 10, 20);
      g2.setPaint(Color.BLACK);
      g2.drawString("Hello Everyone", 400,25);
    }


    public void enableSelecting(){
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        addMouseListener(select_shape);
        addMouseMotionListener(select_shape);
    }

    public void enableMultiSelecting(){
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        addMouseListener(select_multiple);
        addMouseMotionListener(select_multiple);
    }

    public void enableNothing(){
        select_shape.unselectAll();
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        repaint();
    }

    public void enableCreating(){

        select_shape.unselectAll();
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        addMouseListener(create_shapes);
        addMouseMotionListener(create_shapes);
        atleast_selected = false;

    }

    public void enablePolygonCreating(){

        select_shape.unselectAll();
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        addMouseListener(getMake_poly());
        addMouseMotionListener(getMake_poly());
        atleast_selected = false;

    }

     public void enableZooming(){

        select_shape.unselectAll();
        MouseListener[] ml = getMouseListeners();
        MouseMotionListener[] mml = getMouseMotionListeners();
        for (int i=0;i<ml.length;i++){
            removeMouseListener(ml[i]);
        }
        for (int i=0;i<mml.length;i++){
            removeMouseMotionListener(mml[i]);
        }
        addMouseListener(getZoom());
        addMouseMotionListener(getZoom());
        atleast_selected = false;

    }

    private createShapes create_shapes = new createShapes(this);
    private SelectShape select_shape = new SelectShape(this);
    private Zoom zoom = new Zoom(this);
    private SelectMultiple select_multiple = new SelectMultiple(this);
    private Poly make_poly = new Poly(this);
    private ArrayList<Rect> rect_array = new ArrayList<Rect>();
    private ArrayList<Ellipse> ellipse_array = new ArrayList<Ellipse>();
    private ArrayList<Line> line_array = new ArrayList<Line>();
    private ArrayList<Image> images = new ArrayList<Image>();
    private ArrayList<Rect> img_rect = new ArrayList<Rect>();
    private ArrayList<grouping> group_array = new ArrayList<grouping>();
    private ArrayList<clipArt> clip_array = new ArrayList<clipArt>();
    private ArrayList<Poly> poly_array = new ArrayList<Poly>();
    private ArrayList<TextBox> text_array = new ArrayList<TextBox>();
    private ArrayList<Rect> text_rect = new ArrayList<>();
    private Rectangle2D.Float zoom_rect = new Rectangle2D.Float(0,0,0,0);



    private int num_poly = 0;
    private int num_rect = 0;
    private int num_ellipse = 0;
    private int num_line = 0;
    private int num_images = 0;
    private int num_text = 0;
    private Point startDrag;
    private Point endDrag;
    private float zoom_level = 1;
    private boolean zoom_flag = false;

    private int shape = 2;
    private boolean atleast_selected;
    /**
     * @return the shape
     */
    public int getShape() {
        return shape;
    }

    /**
     * @param shape the shape to set
     */
    public void setShape(int shape) {
        this.shape = shape;
    }

    /**
     * @return the create_shapes
     */
    public createShapes getCreate_shapes() {
        return create_shapes;
    }

    /**
     * @param create_shapes the create_shapes to set
     */
    public void setCreate_shapes(createShapes create_shapes) {
        this.create_shapes = create_shapes;
    }

    /**
     * @return the rect_array
     */
    public ArrayList<Rect> getRect_array() {
        return rect_array;
    }

    /**
     * @param rect_array the rect_array to set
     */
    public void setRect_array(ArrayList<Rect> rect_array) {
        this.rect_array = rect_array;
    }

    /**
     * @return the ellipse_array
     */
    public ArrayList<Ellipse> getEllipse_array() {
        return ellipse_array;
    }

    /**
     * @param ellipse_array the ellipse_array to set
     */
    public void setEllipse_array(ArrayList<Ellipse> ellipse_array) {
        this.ellipse_array = ellipse_array;
    }

    /**
     * @return the line_array
     */
    public ArrayList<Line> getLine_array() {
        return line_array;
    }

    /**
     * @param line_array the line_array to set
     */
    public void setLine_array(ArrayList<Line> line_array) {
        this.line_array = line_array;
    }

    /**
     * @return the num_rect
     */
    public int getNum_rect() {
        return num_rect;
    }

    /**
     * @param num_rect the num_rect to set
     */
    public void setNum_rect(int num_rect) {
        this.num_rect = num_rect;
    }

    /**
     * @return the num_ellipse
     */
    public int getNum_ellipse() {
        return num_ellipse;
    }

    /**
     * @param num_ellipse the num_ellipse to set
     */
    public void setNum_ellipse(int num_ellipse) {
        this.num_ellipse = num_ellipse;
    }

    /**
     * @return the num_line
     */
    public int getNum_line() {
        return num_line;
    }

    /**
     * @param num_line the num_line to set
     */
    public void setNum_line(int num_line) {
        this.num_line = num_line;
    }

    /**
     * @return the startDrag
     */
    public Point getStartDrag() {
        return startDrag;
    }

    /**
     * @param startDrag the startDrag to set
     */
    public void setStartDrag(Point startDrag) {
        this.startDrag = startDrag;
    }

    /**
     * @return the endDrag
     */
    public Point getEndDrag() {
        return endDrag;
    }

    /**
     * @param endDrag the endDrag to set
     */
    public void setEndDrag(Point endDrag) {
        this.endDrag = endDrag;
    }

    /**
     * @return the images
     */
    public ArrayList<Image> getImages() {
        return images;
    }

    /**
     * @param images the images to set
     */
    public void setImages(ArrayList<Image> images) {
        this.images = images;
    }

    /**
     * @return the img_rect
     */
    public ArrayList<Rect> getImg_rect() {
        return img_rect;
    }

    /**
     * @param img_rect the img_rect to set
     */
    public void setImg_rect(ArrayList<Rect> img_rect) {
        this.img_rect = img_rect;
    }

    /**
     * @return the num_images
     */
    public int getNum_images() {
        return num_images;
    }

    /**
     * @param num_images the num_images to set
     */
    public void setNum_images(int num_images) {
        this.num_images = num_images;
    }

    /**
     * @return the group_array
     */
    public ArrayList<grouping> getGroup_array() {
        return group_array;
    }

    /**
     * @param group_array the group_array to set
     */
    public void setGroup_array(ArrayList<grouping> group_array) {
        this.group_array = group_array;
    }

    /**
     * @return the clip_array
     */
    public ArrayList<clipArt> getClip_array() {
        return clip_array;
    }

    /**
     * @param clip_array the clip_array to set
     */
    public void setClip_array(ArrayList<clipArt> clip_array) {
        this.clip_array = clip_array;
    }

    /**
     * @return the poly_array
     */
    public ArrayList<Poly> getPoly_array() {
        return poly_array;
    }

    /**
     * @param poly_array the poly_array to set
     */
    public void setPoly_array(ArrayList<Poly> poly_array) {
        this.poly_array = poly_array;
    }

    /**
     * @return the num_poly
     */
    public int getNum_poly() {
        return num_poly;
    }

    /**
     * @param num_poly the num_poly to set
     */
    public void setNum_poly(int num_poly) {
        this.num_poly = num_poly;
    }

    /**
     * @return the make_poly
     */
    public Poly getMake_poly() {
        return make_poly;
    }

    /**
     * @param make_poly the make_poly to set
     */
    public void setMake_poly(Poly make_poly) {
        this.make_poly = make_poly;
    }

    /**
     * @return the zoom_flag
     */
    public boolean isZoom_flag() {
        return zoom_flag;
    }

    /**
     * @param zoom_flag the zoom_flag to set
     */
    public void setZoom_flag(boolean zoom_flag) {
        this.zoom_flag = zoom_flag;
    }

    /**
     * @return the zoom_level
     */
    public float getZoom_level() {
        return zoom_level;
    }

    /**
     * @param zoom_level the zoom_level to set
     */
    public void setZoom_level(float zoom_level) {
        this.zoom_level = zoom_level;
    }

    /**
     * @return the zoom
     */
    public Zoom getZoom() {
        return zoom;
    }

    /**
     * @param zoom the zoom to set
     */
    public void setZoom(Zoom zoom) {
        this.zoom = zoom;
    }

    /**
     * @return the text_array
     */
    public ArrayList<TextBox> getText_array() {
        return text_array;
    }

    /**
     * @param text_array the text_array to set
     */
    public void setText_array(ArrayList<TextBox> text_array) {
        this.text_array = text_array;
    }

    /**
     * @return the text_rect
     */
    public ArrayList<Rect> getText_rect() {
        return text_rect;
    }

    /**
     * @param text_rect the text_rect to set
     */
    public void setText_rect(ArrayList<Rect> text_rect) {
        this.text_rect = text_rect;
    }

    /**
     * @return the num_text
     */
    public int getNum_text() {
        return num_text;
    }

    /**
     * @param num_text the num_text to set
     */
    public void setNum_text(int num_text) {
        this.num_text = num_text;
    }

    /**
     * @return the clip_array
     */



  }

